package utility;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.UUID;
import modules.ApplicationManager;

public class Utility {

	// TODO
	/*
	 * public static String dateToString(Date date) { Calendar calendar =
	 * Calendar.getInstance(); calendar.setTime(date); int year =
	 * calendar.get(Calendar.YEAR); int month = calendar.get(Calendar.MONTH) + 1;
	 * int day = calendar.get(Calendar.DAY_OF_MONTH); String yearString = new
	 * DecimalFormat("0000").format(year); String monthString = new
	 * DecimalFormat("00").format(month); String dayString = new
	 * DecimalFormat("00").format(day); return yearString + "-" + monthString +
	 * "-" + dayString; }
	 */
	
	private static final char[] HEXADECIMAL_VALUES = "0123456789ABCDEF".toCharArray();
	
	public static String bytesToHexadecimal(byte[] bytes) {
		int byteCount = bytes.length;
		char[] chars = new char[2 * byteCount];
		
		for (int i = 0; i < byteCount; i++) {
		    int byteValue = bytes[i] & 0xFF;
		    chars[2 * i] = HEXADECIMAL_VALUES[byteValue >>> 4]; // Most significant bits
		    chars[2 * i + 1] = HEXADECIMAL_VALUES[byteValue & 0x0F]; // Least significant bits
		}
		
		return new String(chars);
	}
	
	public static String computeSha512(byte[] hashBytes) {
		try {
			// Initializes the algorithm
			MessageDigest algorithm = MessageDigest.getInstance("SHA-512");
			
			// Computes the hash value
			byte[] hashBytes = algorithm.digest(bytes);
			
			// Converts the checksum bytes to hexadecimal
			return Utility.bytesToHexadecimal(checksumBytes);
		} catch (NoSuchAlgorithmException exception) {
			// Exits the application abnormally
			ApplicationManager.exitAbnormally("Algorithm SHA-512 not found.", exception);
			return null;
		}
	}
	
	public static String generateUuid() {
		// Computes a random UUID
		UUID uuid = UUID.randomUUID();
		
		// Converts the UUID to hexadecimal and returns it
		long higherBits = uuid.getMostSignificantBits();
		long lowerBits = uuid.getLeastSignificantBits();
		return Long.toHexString(higherBits) + Long.toHexString(lowerBits);
	}

}
